{"meta":{"title":"Rainbow","subtitle":"吃点啥好呢？","description":"","author":"sudatime","url":"https://blog.sodarain.top","root":"/"},"pages":[{"title":"404","date":"2020-08-10T07:00:30.515Z","updated":"2020-08-10T07:00:30.515Z","comments":false,"path":"/404.html","permalink":"https://blog.sodarain.top/404.html","excerpt":"","text":"404 Not Found 对不起，您所访问的页面不存在或者已删除 点击此处返回首页 我的Github：https://github.com/sudatime/"},{"title":"关于","date":"2020-08-09T12:29:00.000Z","updated":"2020-08-10T03:50:24.462Z","comments":true,"path":"about/index.html","permalink":"https://blog.sodarain.top/about/index.html","excerpt":"","text":"兴趣使然~"},{"title":"分类","date":"2020-08-10T00:43:13.000Z","updated":"2020-08-12T03:57:37.221Z","comments":true,"path":"categories/index.html","permalink":"https://blog.sodarain.top/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-08-10T00:43:09.000Z","updated":"2020-08-12T03:57:47.364Z","comments":true,"path":"tags/index.html","permalink":"https://blog.sodarain.top/tags/index.html","excerpt":"","text":""},{"title":"yourdiy","date":"2020-08-09T12:29:08.000Z","updated":"2020-08-09T12:29:08.843Z","comments":true,"path":"yourdiy/index.html","permalink":"https://blog.sodarain.top/yourdiy/index.html","excerpt":"","text":""}],"posts":[{"title":"nginx实现负载均衡","slug":"nginx实现负载均衡","date":"2020-08-11T08:38:12.000Z","updated":"2020-08-12T00:29:50.527Z","comments":true,"path":"2020/08/11/posts/nginxConfig.html/","link":"","permalink":"https://blog.sodarain.top/2020/08/11/posts/nginxConfig.html/","excerpt":"Nginx可以配置代理多台服务器，当一台服务器宕机之后，仍能保持系统可用。记录一下nginx负载均衡的实现，配置文件如下：","text":"Nginx可以配置代理多台服务器，当一台服务器宕机之后，仍能保持系统可用。记录一下nginx负载均衡的实现，配置文件如下： 在http节点下，添加upstream节点。 1234upstream abc &#123; server localhost:7080; server localhost:8980; &#125; 将server节点下的location节点中的proxy_pass配置为：http:// + upstream名称，即 123456location &#x2F; &#123; root html; &#x2F;&#x2F;http:&#x2F;&#x2F; + upstream名称 proxy_pass http:&#x2F;&#x2F;abc; index index.html index.htm; &#125; upstream按照轮询（默认）方式进行负载，每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。虽然这种方式简便、成本低廉。但缺点是：可靠性低和负载分配不均衡。适用于图片服务器集群和纯静态页面服务器集群。除此之外，upstream还有其它的分配策略，分别如下： weight（权重） 指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。如下所示，10.0.0.88的访问比率要比10.0.0.77的访问比率高一倍。 1234upstream linuxidc&#123; server 10.0.0.77 weight&#x3D;5; server 10.0.0.88 weight&#x3D;10; &#125; ip_hash（访问ip） 每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。 12345upstream favresin&#123; ip_hash; server 10.0.0.10:8080; server 10.0.0.11:8080; &#125; fair（第三方） 按后端服务器的响应时间来分配请求，响应时间短的优先分配。与weight分配策略类似。 12345 upstream abc&#123; server 10.0.0.10:8080; server 10.0.0.11:8080; fair; &#125; url_hash（第三方） 按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。 注意：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法。 123456 upstream abc&#123; server 10.0.0.10:7777; server 10.0.0.11:8888; hash $request_uri; hash_method crc32; &#125; upstream还可以为每个设备设置状态值，这些状态值的含义分别如下： down 表示单前的server暂时不参与负载. weight 默认为1.weight越大，负载的权重就越大。 max_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误. fail_timeout : max_fails次失败后，暂停的时间。 backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。 1234567upstream bakend&#123; #定义负载均衡设备的Ip及设备状态 ip_hash; server 10.0.0.11:9090 down; server 10.0.0.11:8080 weight&#x3D;2; server 10.0.0.11:6060; server 10.0.0.11:7070 backup; &#125;","categories":[{"name":"nginx","slug":"nginx","permalink":"https://blog.sodarain.top/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://blog.sodarain.top/tags/nginx/"}]},{"title":"爬取武生院教务处通知","slug":"爬取教务处通知","date":"2020-08-10T13:57:00.181Z","updated":"2020-08-12T03:49:15.587Z","comments":true,"path":"2020/08/10/posts/wsy-crawler.html/","link":"","permalink":"https://blog.sodarain.top/2020/08/10/posts/wsy-crawler.html/","excerpt":"记录一下之前因为某些特殊原因而要去爬取武生院网站通知的代码，防止后面有别的需要而忘记使用方法。","text":"记录一下之前因为某些特殊原因而要去爬取武生院网站通知的代码，防止后面有别的需要而忘记使用方法。 Jsoup介绍jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。 –来源百度百科 环境采用Springboot 2.3.0搭建环境 依赖如下： 1234567891011&lt;!--起步依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--此为核心包 jsoup爬虫--&gt;&lt;dependency&gt; &lt;groupId&gt;org.jsoup&lt;/groupId&gt; &lt;artifactId&gt;jsoup&lt;/artifactId&gt; &lt;version&gt;1.11.3&lt;/version&gt;&lt;/dependency&gt; 核心代码12345678910111213141516171819202122public boolean getNotice(Integer tbodyIndex, Integer trNum) throws Exception &#123; //获取document对象 Document document = Jsoup.connect(URL).get(); //获取第7个tbody的内容 Elements tbody = document.select(&quot;tbody&quot;).eq(tbodyIndex); //System.out.println(tbody.toString()); List&lt;Article&gt; articles = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; trNum; i++) &#123; Elements tr = tbody.select(&quot;tr&quot;).eq(i); Elements td1 = tr.select(&quot;td&quot;).eq(0); Elements td2 = tr.select(&quot;td&quot;).eq(2); String href = URL + td1.select(&quot;a&quot;).attr(&quot;href&quot;); int index = href.indexOf(&quot;id&quot;); //截取id的数字字段 String id = href.substring(index + 3, index + 7); String body = td1.select(&quot;a&quot;).text(); String date = td2.text(); Article article = new Article(Integer.parseInt(id), body, href, DateUtils.parseString2Date(date)); articles.add(article); &#125; return sendMessage(articles);&#125; 思路1Document document = Jsoup.connect(URL).get(); 这行代码能够访问指定的URL路径来获取返回的静态页面 通过分析得到的html可以得知我们想要的新闻通知区域在第7个tbody中 打印输出的tbody，可以发现数据都存放在tr标签里面，分了三个td小标签 我们只取我们想要的数据： 第一个td里面是文章链接，不带域名的。 第二个td里面是文章后面的gif图片，没啥用 第三个td里面是日期 所以我们可以使用 12Elements td1 = tr.select(&quot;td&quot;).eq(0);Elements td2 = tr.select(&quot;td&quot;).eq(2); 来获取链接和日期 使用Article对象来进行封装。得到文章对象之后，要做什么处理就方便了。 意外收获写完之后想继续爬取其他模块的，意外的发现其他模块结构类似，只是tbody和tr值不同，所以封装成一个方法。 1234567891011121314151617181920//新闻通知boolean news = getNotice(6, 9);//教务管理boolean manage = getNotice(11, 6);//教学研究boolean research = getNotice(13, 6);//学籍管理boolean schoolRoll = getNotice(15, 6);//实践教学boolean practice = getNotice(21, 6);//质量管理boolean quality = getNotice(23, 6);//下载专区boolean download = getNotice(25, 6);//工作例会boolean work = getNotice(29, 6);//考务管理boolean exam = getNotice(31, 6);//学习动态boolean study = getNotice(33, 6);","categories":[{"name":"crawler","slug":"crawler","permalink":"https://blog.sodarain.top/categories/crawler/"}],"tags":[{"name":"crawler","slug":"crawler","permalink":"https://blog.sodarain.top/tags/crawler/"}]}],"categories":[{"name":"nginx","slug":"nginx","permalink":"https://blog.sodarain.top/categories/nginx/"},{"name":"crawler","slug":"crawler","permalink":"https://blog.sodarain.top/categories/crawler/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://blog.sodarain.top/tags/nginx/"},{"name":"crawler","slug":"crawler","permalink":"https://blog.sodarain.top/tags/crawler/"}]}